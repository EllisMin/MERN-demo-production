{"version":3,"sources":["custom-button.jsx","user.jsx","user-add-form.jsx","App.js","serviceWorker.js","index.js"],"names":["CustomButton","children","remove","loading","disabled","others","className","User","id","name","age","occupation","attr","handleDelete","onClick","FormInput","otherProps","type","onChange","e","target","value","USER_FORM","UserAddForm","handleAdd","useState","userForm","setUserForm","handleChange","input","updatedForm","onSubmit","preventDefault","handleSubmit","placeholder","App","btnLoading","setBtnLoading","users","setUsers","useEffect","fetchUsers","a","fetch","process","method","res","status","Error","json","resData","console","log","formData","headers","body","JSON","stringify","updatedUsers","user","userId","filter","_id","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.216f0bc0.chunk.js","sourcesContent":["import React from \"react\";\n\nconst CustomButton = ({ children, remove, loading, disabled, ...others }) => {\n  return (\n    <button\n      className={`${remove ? \"btn-delete\" : \"\"} btn-custom`}\n      disabled={disabled || loading}\n      {...others}\n    >\n      {children}\n    </button>\n  );\n};\n\nexport default CustomButton;\n","import React from \"react\";\nimport CustomButton from \"./custom-button\";\n\nconst User = ({ id, name, age, occupation, attr, handleDelete }) => {\n  return (\n    <li className={`${attr ? \"attr\" : \"\"} user`}>\n      <span>{name}</span>\n      <span>{age}</span>\n      <span>{occupation}</span>\n      {!attr && (\n        <CustomButton remove onClick={() => handleDelete(id)}>\n          X\n        </CustomButton>\n      )}\n    </li>\n  );\n};\n\nexport default User;\n","import React, { useState } from \"react\";\nimport CustomButton from \"./custom-button\";\n\nconst FormInput = ({ ...otherProps }) => {\n  return (\n    <div className=\"group\">\n      <input\n        className={\"input-custom\"}\n        type=\"text\"\n        {...otherProps}\n        onChange={e => otherProps.onChange(otherProps.id, e.target.value)}\n      />\n    </div>\n  );\n};\n\nconst USER_FORM = {\n  name: \"\",\n  age: \"\",\n  occupation: \"\"\n};\n\nconst UserAddForm = ({ loading, handleAdd }) => {\n  const [userForm, setUserForm] = useState(USER_FORM);\n\n  const handleChange = (input, value) => {\n    const updatedForm = {\n      ...userForm,\n      [input]: value\n    };\n    setUserForm(updatedForm);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    handleAdd(userForm);\n    setUserForm(USER_FORM);\n  };\n\n  return (\n    <form className=\"form-add-user\" onSubmit={e => handleSubmit(e)}>\n      <FormInput\n        id=\"name\"\n        name=\"name\"\n        placeholder=\"name\"\n        value={userForm[\"name\"]}\n        onChange={handleChange}\n      />\n      <FormInput\n        id=\"age\"\n        name=\"age\"\n        placeholder=\"age\"\n        value={userForm[\"age\"]}\n        onChange={handleChange}\n      />\n      <FormInput\n        name=\"occupation\"\n        id=\"occupation\"\n        placeholder=\"occupation\"\n        value={userForm[\"occupation\"]}\n        onChange={handleChange}\n      />\n      <CustomButton loading={loading} type=\"submit\">\n        Add\n      </CustomButton>\n    </form>\n  );\n};\n\nexport default UserAddForm;\n","import React, { useState, useEffect } from \"react\";\nimport User from \"./user\";\nimport UserAddForm from \"./user-add-form\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [btnLoading, setBtnLoading] = useState(false);\n  const [users, setUsers] = useState([]);\n\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n\n  const fetchUsers = async () => {\n    try {\n      const res = await fetch(process.env.REACT_APP_FETCH_URL + \"/user\", {\n        method: \"GET\"\n      });\n      if (res.status !== 200) {\n        throw new Error(\"Fetching user failed\");\n      }\n      const resData = await res.json();\n      setUsers(resData.users);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const handleAdd = async formData => {\n    setBtnLoading(true);\n    try {\n      const res = await fetch(process.env.REACT_APP_FETCH_URL + \"/user\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          name: formData.name,\n          age: formData.age,\n          occupation: formData.occupation\n        })\n      });\n      if (res.status !== 200 && res.status !== 201) {\n        throw new Error(\"Adding user failed\");\n      }\n      const resData = await res.json();\n      const updatedUsers = [resData.user, ...users];\n      setUsers(updatedUsers);\n    } catch (err) {\n      console.log(err);\n    }\n    setBtnLoading(false);\n  };\n\n  const handleDelete = async userId => {\n    setBtnLoading(true);\n    try {\n      const res = await fetch(\n        process.env.REACT_APP_FETCH_URL + \"/user/\" + userId,\n        {\n          method: \"DELETE\"\n        }\n      );\n      if (res.status !== 200) {\n        throw new Error(\"Deleting user failed\");\n      }\n      await res.json();\n      const updatedUsers = users.filter(user => user._id !== userId);\n      setUsers(updatedUsers);\n    } catch (err) {\n      console.log(err); ///\n    }\n    setBtnLoading(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>MERN Stack App Demo</h1>\n        <hr />\n      </header>\n      <main>\n        <h2>Add User:</h2>\n        <UserAddForm loading={btnLoading} handleAdd={handleAdd} />\n        <hr />\n        <h2>Users:</h2>\n        <ul className=\"user-list\">\n          <User name={\"Name\"} age={\"Age\"} occupation={\"Occupation\"} attr />\n          {users.length > 0 ? (\n            <>\n              {users.map(user => (\n                <User\n                  key={user._id}\n                  id={user._id}\n                  name={user.name}\n                  age={user.age}\n                  occupation={user.occupation}\n                  handleDelete={handleDelete}\n                />\n              ))}\n            </>\n          ) : null}\n        </ul>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}